name: "Code Metrics (On Demand)"

on:
  workflow_dispatch:

jobs:
  analyze:
    name: Run Code Metrics
    runs-on: windows-latest

    permissions:
      contents: read

    defaults:
      run:
        shell: pwsh
        working-directory: src

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.118

      - name: Create global.json file
        run: |
          @"
          {
            "sdk": {
              "version": "8.0.118"
            }
          }
          "@ | Out-File -Encoding utf8 -FilePath global.json

      - name: Check sdk version
        run: |
          dotnet --list-sdks

      - name: Check .net version
        run: |
          dotnet --version

      - name: Check msbuild version
        run: |
          dotnet msbuild --version

      - name: Export SDK resolver variables for Metrics.exe
        run: |
          $ver  = dotnet --version
          $sdks = Join-Path $env:DOTNET_ROOT "sdk\$ver\Sdks"
          if (!(Test-Path $sdks)) { throw "SDKs path not found: $sdks" }
          "MSBuildSDKsPath=$sdks"                                | Out-File -FilePath $env:GITHUB_ENV -Append
          "DOTNET_MSBUILD_SDK_RESOLVER_SDKS_DIR=$sdks"           | Out-File -FilePath $env:GITHUB_ENV -Append
          "DOTNET_MSBUILD_SDK_RESOLVER_CLI_DIR=$env:DOTNET_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "MSBuildSDKsPath = $sdks"

      - name: Restore & Build
        run: |
          dotnet restore DataGEMS.Gateway.sln
          dotnet build DataGEMS.Gateway.sln -c Release

      - name: Clone roslyn-analyzers
        working-directory: ${{ github.workspace }}
        run: git clone --depth 1 https://github.com/dotnet/roslyn-analyzers.git

      - name: Build Metrics.exe
        working-directory: ${{ github.workspace }}\roslyn-analyzers\src\Tools\Metrics
        run: |
          dotnet build -c Release
          $exe = Get-ChildItem -Recurse -Filter Metrics.exe | Select-Object -First 1
          if (-not $exe) { throw "Metrics.exe not found after build." }
          "METRICS_EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Metrics.exe at $($exe.FullName)"

      - name: Run code metrics on DataGEMS.Gateway.Api
        run: |
          & "$env:METRICS_EXE" /project:"DataGEMS.Gateway.Api\DataGEMS.Gateway.Api.csproj" `
                               /out:"DataGEMS.Gateway.Api.Metrics.xml"

      - name: Run code metrics on DataGEMS.Gateway.App
        run: |
          & "$env:METRICS_EXE" /project:"DataGEMS.Gateway.App\DataGEMS.Gateway.App.csproj" `
                               /out:"DataGEMS.Gateway.App.Metrics.xml"

      - name: Run code metrics on DataGEMS.Gateway.Resources
        run: |
          & "$env:METRICS_EXE" /project:"DataGEMS.Gateway.Resources\DataGEMS.Gateway.Resources.csproj" `
                               /out:"DataGEMS.Gateway.Resources.Metrics.xml"

      - name: Upload Metrics XML reports
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics-reports
          path: |
            src/DataGEMS.Gateway.Api/DataGEMS.Gateway.Api.Metrics.xml
            src/DataGEMS.Gateway.App/DataGEMS.Gateway.App.Metrics.xml
            src/DataGEMS.Gateway.Resources/DataGEMS.Gateway.Resources.Metrics.xml
